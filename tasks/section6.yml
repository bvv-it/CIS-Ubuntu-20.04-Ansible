---
- name: "NOTSCORED | 6.1.1 | PATCH | Audit system file permissions"
  command: /bin/true
  changed_when: false
  when:
      - ubuntu2004cis_rule_6_1_1
  tags:
      - level2
      - notscored
      - patch
      - rule_6.1.1
      - notimplemented

- name: "SCORED | 6.1.2 | PATCH | Ensure permissions on /etc/passwd are configured"
  file:
      dest: /etc/passwd
      owner: root
      group: root
      mode: 0644
  when:
      - ubuntu2004cis_rule_6_1_2
  tags:
      - level1
      - scored
      - patch
      - rule_6.1.2

- name: "SCORED | 6.1.3 | PATCH | Ensure permissions on /etc/passwd- are configured"
  file:
      dest: /etc/passwd-
      owner: root
      group: root
      mode: 0600
  when:
      - ubuntu2004cis_rule_6_1_3
  tags:
      - level1
      - scored
      - patch
      - rule_6.1.3

- name: "SCORED | 6.1.4 | PATCH | Ensure permissions on /etc/group are configured"
  file:
      dest: /etc/group
      owner: root
      group: root
      mode: 0644
  when:
      - ubuntu2004cis_rule_6_1_4
  tags:
      - level1
      - scored
      - patch
      - rule_6.1.4

- name: "SCORED | 6.1.5 | PATCH | Ensure permissions on /etc/group- are configured"
  file:
      dest: /etc/group-
      owner: root
      group: root
      mode: 0644
  when:
      - ubuntu2004cis_rule_6_1_5
  tags:
      - level1
      - scored
      - patch
      - rule_6.1.5

- name: "SCORED | 6.1.6 | PATCH | Ensure permissions on /etc/shadow are configured"
  file:
      dest: /etc/shadow
      owner: root
      group: shadow
      mode: 0640
  when:
      - ubuntu2004cis_rule_6_1_6
  tags:
      - level1
      - scored
      - patch
      - rule_6.1.6

- name: "SCORED | 6.1.7 | PATCH | Ensure permissions on /etc/shadow- are configured"
  file:
      dest: /etc/shadow-
      owner: root
      group: shadow
      mode: 0600
  when:
      - ubuntu2004cis_rule_6_1_7
  tags:
      - level1
      - scored
      - patch
      - rule_6.1.7

- name: "SCORED | 6.1.8 | PATCH | Ensure permissions on /etc/gshadow are configured"
  file:
      dest: /etc/gshadow
      owner: root
      group: shadow
      mode: 0640
  when:
      - ubuntu2004cis_rule_6_1_8
  tags:
      - level1
      - scored
      - patch
      - rule_6.1.8

- name: "SCORED | 6.1.9 | PATCH | Ensure permissions on /etc/gshadow- are configured"
  file:
      dest: /etc/gshadow-
      owner: root
      group: shadow
      mode: 0640
  when:
      - ubuntu2004cis_rule_6_1_9
  tags:
      - level1
      - scored
      - patch
      - rule_6.1.9

- name: "SCORED | 6.1.10 | PATCH | Ensure no world writable files exist"
  shell: |
    grep -E -v '^(root|halt|sync|shutdown)' /etc/passwd | awk -F: '($7 !="'"$(which nologin)"'" && $7 != "/bin/false") { print $1 " " $6 }' | while read user dir; do
    if [ ! -d "$dir" ]; then
        echo "The home directory ($dir) of user $user does not exist."
    else
        for file in $dir/.netrc; do
            if [ ! -h "$file" -a -f "$file" ]; then
                fileperm=$(ls -ld $file | cut -f1 -d" ")
                if [ $(echo $fileperm | cut -c5) != "-" ]; then
                    echo "Group Read set on $file"
                fi
                if [ $(echo $fileperm | cut -c6) != "-" ]; then
                    echo "Group Write set on $file"
                fi
                if [ $(echo $fileperm | cut -c7) != "-" ]; then
                    echo "Group Execute set on $file"
                fi
                if [ $(echo $fileperm | cut -c8) != "-" ]; then
                    echo "Other Read set on $file"
                fi
                if [ $(echo $fileperm | cut -c9) != "-" ]; then
                    echo "Other Write set on $file"
                fi
                if [ $(echo $fileperm | cut -c10) != "-" ]; then
                    echo "Other Execute set on $file"
                fi
            fi
        done
    fi
    done
  args:
    executable: /bin/bash
  when:
      - ubuntu2004cis_rule_6_1_10
  tags:
      - level1
      - scored
      - patch
      - rule_6.1.10
      - notimplemented

- name: "SCORED | 6.1.11 | PATCH | Ensure no unowned files or directories exist"
  shell: |
    grep -E -v '^(root|halt|sync|shutdown)' /etc/passwd | awk -F: '($7 !="'"$(which nologin)"'" && $7 != "/bin/false") { print $1 " " $6 }' | while read user dir; do
    if [ ! -d "$dir" ]; then
        echo "The home directory ($dir) of user $user does not exist."
    else
        for file in $dir/.rhosts; do
            if [ ! -h "$file" -a -f "$file" ]; then
                echo ".rhosts file in $dir"
            fi
        done
    fi
    done
  args:
    executable: /bin/bash
  when:
      - ubuntu2004cis_rule_6_1_11
  tags:
      - level1
      - scored
      - patch
      - rule_6.1.11
      - notimplemented

- name: "SCORED | 6.1.12 | PATCH | Ensure no ungrouped files or directories exist"
  block:
    - name: 6.1.12 Ensure no ungrouped files or directories exist | Find
      shell: df --local -P | awk '{if (NR!=1) print $6}' | xargs -I '{}' find '{}' -xdev -nogroup 2> /dev/null && true || true
      register: output_6_1_12
    - name: 6.1.12 Ensure no ungrouped files or directories exist | Save output
      copy:
        dest: "{{ ubuntu2004cis_file_output_dir }}/6.1.12"
        content: "{{ output_6_1_12.stdout_lines }}"
    - name: 6.1.12 Ensure no ungrouped files or directories exist | Fix
      file:
        path: "{{ item }}"
        owner: "{{ withoutOwnerFileDirOwner }}"
        group: "{{ withoutGroupFilesDirGroup }}"
      with_items: "{{ output_6_1_12.stdout_lines }}"
  when:
      - ubuntu2004cis_rule_6_1_12
  tags:
      - level1
      - scored
      - patch
      - rule_6.1.12
      - notimplemented

- name: "NOTSCORED | 6.1.13 | PATCH | Audit SUID executables"
  command: /bin/true
  changed_when: false
  when:
      - ubuntu2004cis_rule_6_1_13
  tags:
      - level1
      - notscored
      - patch
      - rule_6.1.13
      - notimplemented

- name: "NOTSCORED | 6.1.14 | PATCH | Audit SGID executables"
  command: /bin/true
  changed_when: false
  when:
      - ubuntu2004cis_rule_6_1_14
  tags:
      - level1
      - notscored
      - patch
      - rule_6.1.14
      - notimplemented

- name: "NOTSCORED | 6.2.1 | PATCH | Ensure accounts in /etc/passwd use shadowed passwords"
  command: /bin/true
  changed_when: false
  when:
      - ubuntu2004cis_rule_6_2_1
  tags:
      - level1
      - notscored
      - patch
      - rule_6.2.1
      - notimplemented


- name: "SCORED | 6.2.2 | PATCH | Ensure password fields are not empty"
  command: passwd -l {{ item }}
  changed_when: false
  failed_when: false
  with_items: "{{ empty_password_accounts.stdout_lines }}"
  when:
      - empty_password_accounts.rc
      - ubuntu2004cis_rule_6_2_2
  tags:
      - level1
      - scored
      - patch
      - rule_6.2.2

- name: "SCORED | 6.2.3 | PATCH | Ensure all groups in /etc/passwd exist in /etc/group"
  block:
    - name: 6.2.3 Ensure all groups in /etc/passwd exist in /etc/group | list
      shell: |
        for i in $(cut -s -d: -f4 /etc/passwd | sort -u); do
            grep -q -P "^.*?:[^:]*:$i:" /etc/group
            if [ $? -ne 0 ]; then
                echo "Group $i is referenced by /etc/passwd but does not exist in /etc/group"
            fi
        done
      register: output_6_2_3
    - name: 6.2.3 Ensure all groups in /etc/passwd exist in /etc/group | save output
      copy:
        dest: "{{ ubuntu2004cis_file_output_dir }}/6.2.3"
        content: "{{ output_6_2_3 }}"
  when:
      - ubuntu2004cis_rule_6_2_3
  tags:
      - level1
      - scored
      - patch
      - rule_6.2.3
      - notimplemented

- name: "SCORED | 6.2.4 | PATCH | Ensure all users' home directories exist"
  block:
    - name: 6.2.4 Ensure all users' home directories exist | list
      shell: |
        grep -E -v '^(halt|sync|shutdown)' /etc/passwd | awk -F: '($7 != "'"$(which nologin)"'" && $7 != "/bin/false") { print $1 " " $6 }' | while
        read -r user dir
        do
            if [ ! -d "$dir" ]; then
                echo "${user}"
            fi
        done
      register: output_6_2_4
    - name: 6.2.4 Ensure all users' home directories exist | save
      copy:
        dest: "{{ ubuntu2004cis_file_output_dir }}/6.2.4"
        content: "{{ output_6_2_4.stdout_lines }}"
    - name: 6.2.4 Ensure all users' home directories exist | fix
      user:
        name: "{{ item }}"
        create_home: yes
      with_items: "{{ output_6_2_4.stdout_lines }}"
      when: "{{ output_6_2_4.stdout_lines|length > 0 }}"
  when:
      - ubuntu2004cis_rule_6_2_4
  tags:
      - level1
      - scored
      - patch
      - rule_6.2.4
      - notimplemented

- name: "SCORED | 6.2.5 | PATCH | Ensure appropriate umask set for adduser"
  shell: |
    var_adduser_home_directories_mode='0750'
    valid_mode=${var_adduser_home_directories_mode}
    adduser_conf=/etc/adduser.conf

    dir_mode="$(awk -F= '/^\s*DIR_MODE\s*=\s*[0-7]?[0-7]{3}/{ printf("%04d", strtonum($2)) }' ${adduser_conf})"
    if [ -z "${dir_mode}" ] || [ $(( $dir_mode & 0$valid_mode )) -ne "${dir_mode}" ]; then
        sed -i '/^\s*DIR_MODE\b/d' ${adduser_conf}
        echo 'DIR_MODE='"${valid_mode}" >> ${adduser_conf}
    fi
  when:
      - ubuntu2004cis_rule_6_2_5
  tags:
      - level1
      - scored
      - patch
      - rule_6.2.5
      - notimplemented


- name: "SCORED | 6.2.5 | PATCH | Ensure users own their home directories"
  shell: |
    var_useradd_home_directories_mode='0750'

    valid_mode=${var_useradd_home_directories_mode}
    useradd_conf=/etc/login.defs

    home_mode="$(awk -F= '/^\s*HOME_MODE\s*=\s*[0-7]?[0-7]{3}/{ printf("%04d", strtonum($2)) }' ${useradd_conf})"
    if [ -z "${home_mode}" ] || [ $(( $home_mode & 0$valid_mode )) -ne "${home_mode}" ]; then
        sed -i '/^\s*HOME_MODE\b/d' ${useradd_conf}
        echo -e 'HOME_MODE\t'"${valid_mode}" >> ${useradd_conf}
    fi
  when:
      - ubuntu2004cis_rule_6_2_5
  tags:
      - level1
      - scored
      - patch
      - rule_6.2.5
      - notimplemented

- name: "SCORED | 6.2.6 | PATCH | Ensure users' home directories permissions are 750 or more restrictive"
  shell: |
      for dir in {{ homes_with_perms.stdout }};
      do
        chmod g-w,o-rwx $dir;
      done
  when:
      - ubuntu2004cis_rule_6_2_6
      - homes_with_perms.stdout | length > 0
  tags:
      - level1
      - scored
      - patch
      - rule_6.2.6

- name: "SCORED | 6.2.7 | PATCH | Ensure users' dot files are not group or world writable"
  block:
    - name: 6.2.7 Ensure users' dot files are not group or world writable | list
      script: 6_2_7.sh
      register: output_6_2_7_files
      when: not fix_dot_include_folders
    - name: 6.2.7 Ensure users' dot files and folders are not group or world writable | list
      script: 6_2_7_include_folders.sh
      register: output_6_2_7_folders
      when: fix_dot_include_folders
    - name: 6.2.7 Ensure users' dot files are not group or world writable | save output
      copy:
        dest: "{{ ubuntu2004cis_file_output_dir }}/6.2.7"
        content: "{{ output_6_2_7_files.stdout }}"
      when: not fix_dot_include_folders
    - name: 6.2.7 Ensure users' dot files and folders are not group or world writable | save output
      copy:
        dest: "{{ ubuntu2004cis_file_output_dir }}/6.2.7"
        content: "{{ output_6_2_7_folders.stdout }}"
      when: fix_dot_include_folders
    - name: 6.2.7 Ensure users' dot files are not group or world writable | correct file permissions
      # files with go+w will be touched twice, as they figure twice in the filter result
      file:
        path: "{{ item.split()[-1] }}"
        mode: g-w,o-w
      with_items: "{{ output_6_2_7_files.stdout_lines }}"
      when:
        - ubuntu2004cis_rule_6_2_7_fix_dot_file_permissions
        - "'stdout_lines' in output_6_2_7_files"
        - not ubuntu2004cis_rule_6_2_7_fix_dot_include_folders
    - name: 6.2.7 Ensure users' dot files and folders are not group or world writable | correct file permissions
      # files with go+w will be touched twice, as they figure twice in the filter result
      file:
        path: "{{ item.split()[-1] }}"
        mode: g-w,o-w
      with_items: "{{ output_6_2_7_folders.stdout_lines }}"
      when:
        - fix_dot_file_permissions
        - "'stdout_lines' in output_6_2_7_folders"
        - fix_dot_include_folders
  when:
      - ubuntu2004cis_rule_6_2_7
  tags:
      - level1
      - scored
      - patch
      - rule_6.2.7
      - notimplemented

- name: "SCORED | 6.2.8 | PATCH | Ensure no users have .netrc files"
  file:
      state: absent
      dest: "~{{ item }}/.netrc"
  with_items: "{{ users.stdout_lines }}"
  when:
      - ubuntu2004cis_rule_6_2_8
  tags:
      - level1
      - scored
      - patch
      - rule_6.2.8

- name: "SCORED | 6.2.9 | PATCH | Ensure no users have .forward files"
  file:
      state: absent
      dest: "~{{ item }}/.forward"
  with_items: "{{ users.stdout_lines }}"
  when:
      - ubuntu2004cis_rule_6_2_9
  tags:
      - level1
      - scored
      - patch
      - rule_6.2.9

- name: "SCORED | 6.2.10 | PATCH | Ensure no users have .rhosts files"
  file:
      state: absent
      dest: "~{{ item }}/.rhosts"
  with_items: "{{ users.stdout_lines }}"
  when:
      - ubuntu2004cis_rule_6_2_10
  tags:
      - level1
      - scored
      - patch
      - rule_6.2.10

- name: "SCORED | 6.2.11 | PATCH | Ensure root is the only UID 0 account"
  command: passwd -l {{ item }}
  changed_when: false
  failed_when: false
  with_items: "{{ uid_zero_accounts_except_root.stdout_lines }}"
  when:
      - uid_zero_accounts_except_root.rc
      - ubuntu2004cis_rule_6_2_11
  tags:
      - level1
      - scored
      - patch
      - rule_6.2.11

- name: "SCORED | 6.2.12 | PATCH | Ensure root PATH Integrity"
  block:
      - name: "SCORED | 6.2.12 | PATCH | Ensure root PATH Integrity (unimplemented)"
        command: /bin/true
        changed_when: false
        tags:
            - level1
            - scored
            - patch
            - rule_6.2.12
            - notimplemented

      - name: "SCORED | 6.2.12 | PATCH | Ensure root PATH Integrity (collect paths)"
        shell: |
          set -o pipefail;
          sudopath=($(grep secure_path /etc/sudoers | cut -f2 -d= |cut -f2 -d\"))
          IFS=:
          for i in ${sudopath[*]}
          do
            if [ -d "$i" ]
              then newsudopath+=($i)
            fi
           done
          echo "${newsudopath[*]}"
        args:
            executable: /bin/bash
        register: fixsudo
        changed_when: false
        check_mode: false
        tags:
            - level1
            - scored
            - patch
            - rule_6.2.12

      - name: "SCORED | 6.2.12 | PATCH | Ensure root PATH Integrity (fix paths)"
        lineinfile:
            dest: /etc/sudoers
            regexp: "(.*secure_path=).*"
            line: '\1"{{ fixsudo.stdout_lines[0] }}"'
            backrefs: true
        when:
            - fixsudo.stdout_lines[0]
        tags:
            - level1
            - scored
            - patch
            - rule_6.2.12
  when:
      - ubuntu2004cis_rule_6_2_12


- name: "SCORED | 6.2.13 | PATCH | Ensure no duplicate UIDs exist"
  block:
    - name: 6.2.13 Ensure no duplicate UIDs exist | list
      shell: |
        cut -f3 -d":" /etc/passwd | sort -n | uniq -c | while read x; do
            [ -z "$x" ] && break
            set - $x
            if [ $1 -gt 1 ]; then
                users=$(awk -F: '($3 == n) { print $1 }' n=$2 /etc/passwd | xargs)
                echo "Duplicate UID ($2): $users"
            fi
        done
      register: output_6_2_13
    - name: 6.2.13 Ensure no duplicate UIDs exist | save output
      copy:
        dest: "{{ ubuntu2004cis_file_output_dir }}/6.2.13"
        content: "{{ output_6_2_13 }}"
  when:
      - ubuntu2004cis_rule_6_2_13
  tags:
      - level1
      - scored
      - patch
      - rule_6.2.13
      - notimplemented

- name: "SCORED | 6.2.14 | PATCH | Ensure no duplicate GIDs exist"
  block:
    - name: 6.2.14 Ensure no duplicate GIDs exist | list
      shell: |
        cut -d: -f3 /etc/group | sort | uniq -d | while read x; do
            echo "Duplicate GID ($x) in /etc/group"
        done
      register: output_6_2_14
    - name: 6.2.14 Ensure no duplicate GIDs exist | save output
      copy:
        dest: "{{ ubuntu2004cis_file_output_dir }}/6.2.14"
        content: "{{ output_6_2_14 }}"
  when:
      - ubuntu2004cis_rule_6_2_14
  tags:
      - level1
      - scored
      - patch
      - rule_6.2.14
      - notimplemented

- name: "SCORED | 6.2.15 | PATCH | Ensure no duplicate user names exist"
  block:
    - name: 6.2.15 Ensure no duplicate user names exist | list
      shell: |
        cut -d: -f1 /etc/passwd | sort | uniq -d | while read x; do
            echo "Duplicate login name ${x} in /etc/passwd"
        done
      register: output_6_2_15
    - name: 6.2.15 Ensure no duplicate user names exist | save output
      copy:
        dest: "{{ ubuntu2004cis_file_output_dir }}/6.2.15"
        content: "{{ output_6_2_15.stdout_lines }}"
  when:
      - ubuntu2004cis_rule_6_2_15
  tags:
      - level1
      - scored
      - patch
      - rule_6.2.15
      - notimplemented

- name: "SCORED | 6.2.16 | PATCH | Ensure no duplicate group names exist"
  block:
    - name: 6.2.16 Ensure no duplicate group names exist | list
      shell: |
        cut -d: -f1 /etc/group | sort | uniq -d | while read x; do
            echo "Duplicate group name ${x} in /etc/group"
        done
      register: output_6_2_16
    - name: 6.2.16 Ensure no duplicate group names exist | save output
      copy:
        dest: "{{ ubuntu2004cis_file_output_dir }}/2.6.16"
        content: "{{ output_6_2_16 }}"
  when:
      - ubuntu2004cis_rule_6_2_16
  tags:
      - level1
      - scored
      - patch
      - rule_6.2.16
      - notimplemented

- name: "SCORED | 6.2.17 | PATCH | Ensure shadow group is empty"
  block:
    - name: 6.2.17 Ensure shadow group is empty | list
      shell: |
        grep ^shadow:[^:]*:[^:]*:[^:]+ /etc/group
        awk -F: '($4 == "<shadow-gid>") { print }' /etc/passwd
      register: output_6_2_17
    - name: 6.2.17 Ensure shadow group is empty | save output
      copy:
        dest: "{{ ubuntu2004cis_file_output_dir }}/6.2.17"
        content: "{{ output_6_2_17 }}"
  when:
      - ubuntu2004cis_rule_6_2_17
  tags:
      - level1
      - scored
      - patch
      - rule_6.2.17
      - notimplemented
